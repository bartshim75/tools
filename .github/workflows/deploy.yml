name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ax-tools-app
  REGION: us-central1
  REPOSITORY: ax-tools-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Manual Google Cloud Authentication
      run: |
        echo "=== Manual Google Cloud Authentication ==="
        
        # Check if service account key is provided
        if [ "${{ secrets.GCP_SA_KEY }}" = "" ]; then
          echo "❌ GCP_SA_KEY is not set or empty"
          exit 1
        fi
        
        # Create service account key file
        echo "${{ secrets.GCP_SA_KEY }}" > /tmp/service-account-key.json
        
        # Verify the JSON is valid (using python for better error handling)
        python3 -c "import json; json.load(open('/tmp/service-account-key.json'))" 2>/dev/null || {
          echo "❌ GCP_SA_KEY is not valid JSON"
          echo "Please check the JSON format in GitHub Secrets"
          exit 1
        }
        
        # Authenticate with service account
        gcloud auth activate-service-account --key-file=/tmp/service-account-key.json
        gcloud config set project ${{ env.PROJECT_ID }}
        
        echo "✅ Service account authentication successful"
        
    - name: Verify Google Cloud authentication
      run: |
        echo "=== Google Cloud Authentication Check ==="
        echo "Project ID: ${{ env.PROJECT_ID }}"
        echo "Current project: $(gcloud config get-value project)"
        echo "Current account: $(gcloud config get-value account)"
        echo "=== Service Account Info ==="
        gcloud auth list
        echo "=== Testing Project Access ==="
        gcloud projects describe ${{ env.PROJECT_ID }} --format="value(projectId)"
        
    - name: Configure Docker for Artifact Registry
      run: |
        echo "=== Configuring Docker for Artifact Registry ==="
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
        
    - name: Create Artifact Registry repository (if not exists)
      run: |
        echo "=== Checking Artifact Registry Repository ==="
        echo "Repository: ${{ env.REPOSITORY }}"
        echo "Location: ${{ env.REGION }}"
        
        # Check if repository exists
        if gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }} --quiet 2>/dev/null; then
          echo "✅ Repository already exists"
        else
          echo "📦 Repository does not exist, creating..."
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="AX Tools App Repository"
          echo "✅ Repository created successfully"
        fi
        
    - name: Build and push Docker image
      run: |
        echo "=== Building Docker Image ==="
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        echo "=== Pushing Docker Image ==="
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        
    - name: Deploy to Cloud Run
      run: |
        echo "=== Deploying to Cloud Run ==="
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }},VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
    - name: Get Cloud Run URL
      id: get-url
      run: |
        echo "=== Getting Cloud Run URL ==="
        echo "url=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')" >> $GITHUB_OUTPUT
        echo "Deployment URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')"
        
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment successful!**\n\nYour app is now live at: ${process.env.URL}\n\nThis deployment was triggered by commit: ${context.sha}`
          })
      env:
        URL: ${{ steps.get-url.outputs.url }} 